## sqlite3 ##
sqlite3 is a lightweight, self-contained SQL database engine that is built into many programming languages, including Python. It is an embedded database that does not require a separate server process, making it ideal for small to medium-sized applications, prototyping, and situations where simplicity and portability are important.

Key Features of SQLite:
Serverless: Unlike many database systems like MySQL or PostgreSQL, SQLite doesn’t need a server to run. It operates within the application using it.
Self-contained: The entire database is stored in a single file, making it easy to deploy and share.
Zero Configuration: No setup or installation is required to use it, making it extremely easy to use for quick projects or local storage needs.
Lightweight: SQLite is designed to be a simple, fast, and reliable database system with low overhead.
SQL Compliant: It supports most of the SQL standards (though it may not have advanced features of larger systems like stored procedures).

# .iloc[-1] is a method used with pandas DataFrames or Series to access the last row or element based on its integer index position. Here’s how it works:
df.iloc[-1]: Retrieves the entire last row of the DataFrame df.
df.iloc[-1][column_name]: Retrieves the value of column_name in the last row.
.iloc[-1] is especially helpful for time series data where you might want the most recent entry.

When you have .loc[:, 'Total Cashflow from Operating activities'].iloc[0], it means you're performing two operations on a pandas DataFrame in sequence:
.loc[:, 'Total Cashflow from Operating activities']: This selects all rows (:) from the column named 'Total Cashflow from Operating activities'.
.iloc[0]: This then retrieves the first entry (row) from the result of the previous selection.
The overall effect is to get the first value from the specified column.

cursor.execute()
In Python's database libraries, like sqlite3 or psycopg2, cursor.execute() is used to run SQL commands in a database session. It allows you to execute various SQL statements (SELECT, INSERT, UPDATE, DELETE, etc.) to interact with and modify data in tables.
What cursor.execute() Does:
Executes SQL Queries: Sends SQL commands to the database.
Fetches Results: For SELECT queries, retrieves data you can access with methods like fetchall() or fetchone().
Modifies Data: For commands like INSERT, UPDATE, or DELETE, it stages changes to be saved with conn.commit().

what is:  SELECT sender, message, timestamp 
        FROM messages 
        WHERE (sender = ? AND receiver = ?) OR (sender = ? AND receiver = ?)
        ORDER BY timestamp ASC
This SQL query retrieves messages between two users from a table called messages. Here’s a breakdown of each part of the query:

SELECT sender, message, timestamp: Specifies that the query should return the columns sender, message, and timestamp from each matching row.
FROM messages: Specifies the table from which to retrieve data, in this case, messages.
WHERE (sender = ? AND receiver = ?) OR (sender = ? AND receiver = ?)
