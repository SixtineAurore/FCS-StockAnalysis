import streamlit as st
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
import sqlite3
import getpass

1. Form

# start connection with Databank 
conn = sqlite3.connect('users.db')
cursor = conn.cursor()

# create a table if it does not exist 
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    username TEXT PRIMARY KEY,
    password TEXT NOT NULL,
    risk_preference TEXT,
    favorite_industries TEXT,
    reasons_membership TEXT,
    favorite_stock TEXT
)
''')
conn.commit()

def register():
    username = input("Please enter a username: ")
    cursor.execute("SELECT * FROM users WHERE username=?", (username,))
    if cursor.fetchone():
        print("Username already exists. Please choose another.")
        return
    
    password = getpass.getpass("Please enter a password. ")
    
    #Investment Profile
    risk_types = ["low", "medium", "high"]
    risk_preference = st.selectbox("Please enter whether you have a low, medium or high appetite for risk.", risk_types)
    
    industries = ["Technology", "Healthcare", "Financials, "Energy", "Consumer Goods", "Utilities"]
    favorite_industries = st.selectbox("Please select your favorite industries.", industries)
    
    favorite_stock = input("Please enter your favorite stock symbol.")

    reasons = ["To have access to a free stock analysis tool", "To network with fellow investors", "Out of curiosity"]
    reasons_membership = st.selectbox("Please explain why you decided to join Smart Stocks.", reasons)

    cursor.execute("INSERT INTO users (username, password, risk_preferences, favourite_industries, reasons_membership, favorite_stock) VALUES (?, ?, ?)",
                   (username, password, favorite_stock))
    conn.commit()
    print("Registration successful!")

def login():
    username = input("Please enter your username: ")
    cursor.execute("SELECT * FROM users WHERE username=?", (username,))
    user = cursor.fetchone()
    if not user:
        print("Username not found.")
        return None
    
    password = getpass.getpass("Please enter your password: ")
    if user[1] != password:
        print("Incorrect password.")
        return None
    
    print("Login successful!")
    return username

def view_profile(username):
    cursor.execute("SELECT * FROM users WHERE username=?", (username,))
    user = cursor.fetchone()
    print(f"\nProfil for {username}:")
    print(f"\nFavorite industry: {user[2]}")
    print(f"\nRisk preference: {user[4]}")
    print(f"\nReasons membership {user[5]}")
    print(f"\nFavorite stock: {user[3]}")

def main():
    while True:
        print("\n1. Registration")
        print("2. Log in")
        print("3. Exit")
        choice = input("Enter your choice (1-3): ")
        
        if choice == '1':
            register()
        elif choice == '2':
            username = login()
            if username:
                view_profile(username)
        elif choice == '3':
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()

# Close database connection
conn.close()

2. Platform
2.1 Profile
# Back-End Pseudocode for Smart Stocks Account Management

# Function to connect to the database for Smart Stocks
function connect_to_database(database_name):
    # Establish a connection to the specified database
    return connection

# Function to hash a password for security
function hash_password(password):
    # Use a secure hashing algorithm to hash the password
    return hashed_password

# Function to verify the password against the stored hashed password
function verify_password(entered_password, stored_hashed_password):
    # Compare the entered password (hashed) with the stored hash
    return match_found

# Function to check if a username already exists in the database
function username_exists(username):
    # Query the database to check for the existing username
    return exists

# Function to store a new user in the database
function store_user_in_database(username, hashed_password, phone_number):
    # Execute an insert command to add the new user to the database

# Function to log in an existing user
function login_user(username, password):
    # Connect to the database
    connection = connect_to_database("Smart Stocks DB")
    
    # Retrieve the stored hashed password for the given username
    stored_hashed_password = get_stored_password(username)

    # Verify the entered password against the stored hashed password
    if verify_password(password, stored_hashed_password):
        # Retrieve user preferences for stock analysis
        user_preferences = get_user_preferences(username)
        return "Login successful!", user_preferences
    else:
        return "Invalid username or password."

# Function to retrieve user preferences for stock analysis
function get_user_preferences(username):
    # Query the database to get stock preferences or analysis data
    return user_preferences_data

# Function to perform stock analysis based on user preferences
function analyze_stocks(user_preferences):
    # Code to fetch stock data based on preferences and perform analysis
    return analysis_results

# Function to retrieve user comments from the community
function get_user_comments(username):
    # Query the database to retrieve user comments or interactions
    return user_comments

# Function to add a comment to the community
function add_comment(username, comment_text):
    # Store the comment in the database associated with the username

# Function to retrieve all comments related to a specific stock
function get_comments_for_stock(stock_symbol):
    # Query the database to get all comments related to the given stock
    return comments

# Function to register a new user
function register_user(username, password, phone_number):
    # Connect to the database
    connection = connect_to_database("Smart Stocks DB")
    
    # Check if the username already exists
    if username_exists(username):
        return "Username already exists. Please choose a different username."
    
    # Hash the password for security
    hashed_password = hash_password(password)
    
    # Store the new user in the database
    store_user_in_database(username, hashed_password, phone_number)
    return "Registration successful!"

# Function to handle user logout
function logout_user(username):
    # Clear user session data or token
    return "Logout successful."

# Optional: Function to update user profile information
function update_user_profile(username, new_phone_number, new_preferences):
    # Update the user's profile information in the database

# Optional: Function to delete user account
function delete_user_account(username):
    # Remove the user's data from the database
    return "Account deleted successfully."

2.2 Stock Analysis
#Formatting
"""Will include headers, subtitles, ..."""
Import necessary modules (e.g. Matplotlib,...)

#Stock data retrieval and analysis
User is asked to input a stock symbol
If it is formatted right:
  Import stock data from Yahoo finance
  Show data on a graph
  Calculate P/E ratios
If it is not formatted right:
  Output a message specifying that the stock data could not be retrieved due because the input was wrongly formatted.

#DCF
If DCF data is available:
  Calculate metrics of a basic DCF
  Show results on a table or graph
  Allow user to change the assumptions made (within logical bounds?)

If DCF data is not available:
  Print a message saying "DCF data not available".

#Adding the stock to the profile
Add a button letting the user add the stock name to a list linked to their profile (with a description?).
"""Stock name should then appear in their profile and be used in the machine learning to connect them to other users."""

#New stock data retrieval and analysis
Either keep the initial stock search bar and let the user enter as many stock names as they want. 
Or have a "New Search" button which, when pressed, will reset the page.

#Potential add ons
- to allow users to retrieve data for more than one stock
- to allow users to compare stock data between two stocks
- to track the amount of views of a stock and rank them
  - could then be used in a "most popular stocks" column in the community tab

2.3 Community

2.4 Machine Learning 
Get Request for the last 5 days, i.e. get_data(ticker, start_date = xyz, end_date = xyz, index_as_date = True, interval = “1d”)
Calculate if the day closed + or - using open and close price from this request
The we have a pattern, i.e. +-++-, check with the table what the prediction for the next day is and print the % range for the following day


